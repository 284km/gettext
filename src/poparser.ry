# -*- mode: ruby; coding: utf-8 -*-
#
#  poparser.ry - ruby version of msgfmt
#
#  Copyright (C) 2002-2008 Masao Mutoh <mutomasa at gmail.com>
#  Copyright (C) 2012 Kouhei Sutou <kou@clear-code.com>
#  Copyright (C) 2012 Haruka Yoshihara <yoshihara@clear-code.com>
#
#  You may redistribute it and/or modify it under the same
#  license terms as Ruby or LGPL.

class GetText::PoParser
  token COMMENT MSGID MSGCTXT MSGID_PLURAL MSGSTR STRING PLURAL_NUM

  rule

  msgfmt
  : /* empty */
  | msgfmt comment
  | msgfmt msgctxt
  | msgfmt message
  ;

  msgctxt
  : MSGCTXT string_list
  {
    @msgctxt = unescape(val[1]) + "\004"
  }
  ;

  message
  : single_message
  | plural_message
  ;

  single_message
  : MSGID string_list MSGSTR string_list
  {
    msgid_raw = val[1]
    msgid = unescape(msgid_raw)
    msgstr = unescape(val[3])
    use_message_p = true
    if @fuzzy and not msgid.empty?
      use_message_p = (not ignore_fuzzy?)
      if report_warning?
        if ignore_fuzzy?
          $stderr.print _("Warning: fuzzy message was ignored.\n")
        else
          $stderr.print _("Warning: fuzzy message was used.\n")
        end
        $stderr.print "  #{@po_file}: msgid '#{msgid_raw}'\n"
      end
    end
    @fuzzy = false
    on_message(@msgctxt + msgid, msgstr) if use_message_p
    result = ""
  }

  plural_message
  : MSGID string_list MSGID_PLURAL string_list msgstr_plural
  {
    if @fuzzy and ignore_fuzzy?
      if val[1] != ""
        if report_warning?
          $stderr.print _("Warning: fuzzy message was ignored.\n")
          $stderr.print "msgid = '#{val[1]}\n"
        end
      else
        on_message('', unescape(val[3]))
      end
      @fuzzy = false
    else
      on_message(@msgctxt + unescape(val[1]) + "\000" + unescape(val[3]), unescape(val[4]))
    end
    result = ""
  }
  ;

  msgstr_plural
  : msgstr_plural msgstr_plural_line
  {
    if val[0].size > 0
      result = val[0] + "\000" + val[1]
    else
      result = ""
    end
  }
  | msgstr_plural_line
  ;

  msgstr_plural_line
  : MSGSTR PLURAL_NUM string_list
  {
    result = val[2]
  }
  ;

  comment
  : COMMENT
  {
    on_comment(val[0])
  }
  #| COMMENT
  #;

  string_list
  : string_list STRING
  {
    result = val.delete_if{|item| item == ""}.join
  }
  | STRING
  {
    result = val[0]
  }
  ;
end

---- header
require "gettext/tools/po"
---- inner
  if GetText.respond_to?(:bindtextdomain)
    include GetText
    GetText.bindtextdomain("gettext")
  else
    def _(message_id)
      message_id
    end
    private :_
  end

  attr_writer :ignore_fuzzy, :report_warning
  def initialize
    @ignore_fuzzy = true
    @report_warning = true
  end

  def ignore_fuzzy?
    @ignore_fuzzy
  end

  def report_warning?
    @report_warning
  end

  def unescape(orig)
    ret = orig.gsub(/\\n/, "\n")
    ret.gsub!(/\\t/, "\t")
    ret.gsub!(/\\r/, "\r")
    ret.gsub!(/\\"/, "\"")
    ret
  end
  private :unescape

  def unescape_string(string)
    string.gsub(/\\\\/, "\\")
  end
  private :unescape_string

  def parse(str, data)
    @comments = []
    @references = []
    @data = data
    @fuzzy = false
    @msgctxt = ""

    str.strip!
    @q = []
    until str.empty? do
      case str
      when /\A\s+/
	str = $'
      when /\Amsgctxt/
	@q.push [:MSGCTXT, $&]
	str = $'
      when /\Amsgid_plural/
	@q.push [:MSGID_PLURAL, $&]
	str = $'
      when /\Amsgid/
	@q.push [:MSGID, $&]
	str = $'
      when /\Amsgstr/
	@q.push [:MSGSTR, $&]
	str = $'
      when /\A\[(\d+)\]/
	@q.push [:PLURAL_NUM, $1]
	str = $'
      when /\A\#~(.*)/
        if report_warning?
          $stderr.print _("Warning: obsolete msgid exists.\n")
          $stderr.print "         #{$&}\n"
        end
	@q.push [:COMMENT, $&]
	str = $'
      when /\A\#(.*)/
	@q.push [:COMMENT, $&]
	str = $'
      when /\A\"(.*)\"/
	@q.push [:STRING, unescape_string($1)]
	str = $'
      else
	#c = str[0,1]
	#@q.push [:STRING, c]
	str = str[1..-1]
      end
    end
    @q.push [false, '$end']
    if $DEBUG
      @q.each do |a,b|
      puts "[#{a}, #{b}]"
      end
    end
    @yydebug = true if $DEBUG
    do_parse

    if @comments.size > 0
      @data.set_comment(:last, @comments.join("\n"))
    end
    @data
  end

  def next_token
    @q.shift
  end

  def on_message(msgid, msgstr)
    msgstr = nil if msgstr.empty?

    if @data.instance_of?(PO)
      msgctxt, msgid, msgid_plural = split_msgid(msgid)
      type = detect_entry_type(msgctxt, msgid_plural)

      entry = PoEntry.new(type)
      entry.references = @references
      entry.msgctxt = msgctxt
      entry.msgid = msgid
      entry.msgid_plural = msgid_plural
      entry.msgstr = msgstr
      @data[msgid] = entry
    else
      @data[msgid] = msgstr
    end
    @data.set_comment(msgid, @comments.join("\n"))

    @comments.clear
    @references = []
    @msgctxt = ""
  end

  COMMENT_MARK = "#"
  REFERENCE_COMMENT_MARK = "#:"
  def on_comment(comment)
    @fuzzy = true if (/fuzzy/ =~ comment)

    if @data.respond_to?(:set_references)
      if comment.start_with?(REFERENCE_COMMENT_MARK)
        comment.lines.each do |reference|
          comment_content =
            reference.gsub(/\A#{Regexp.escape(REFERENCE_COMMENT_MARK)}/, "")
          @references << comment_content.strip
        end
      elsif comment.start_with?(COMMENT_MARK)
        comment.lines.each do |line|
          @comments << line.gsub(/\A#{Regexp.escape(COMMENT_MARK)}/, "").strip
        end
      end
    else
      @comments << comment
    end
  end

  def parse_file(po_file, data)
    args = [ po_file ]
    # In Ruby 1.9, we must detect proper encoding of a PO file.
    if String.instance_methods.include?(:encode)
      encoding = detect_file_encoding(po_file)
      args << "r:#{encoding}"
    end
    @po_file = po_file
    parse(File.open(*args) {|io| io.read }, data)
  end

  def detect_file_encoding(po_file)
    open(po_file, :encoding => 'ASCII-8BIT') do |input|
      input.lines.each do |line|
        return Encoding.find($1) if %r["Content-Type:.*\scharset=(.*)\\n"] =~ line
      end
    end
    Encoding.default_external
  end

  def split_msgid(msgid)
    return [nil, "", nil] if msgid.empty?
    msgctxt, msgid = msgid.split("\004", 2)
    if msgid.nil?
      msgid = msgctxt
      msgctxt = nil
    end
    msgid, msgid_plural = msgid.split("\000", 2)
    [msgctxt, msgid, msgid_plural]
  end

  def detect_entry_type(msgctxt, msgid_plural)
    if msgctxt.nil?
      if msgid_plural.nil?
        :normal
      else
        :plural
      end
    else
      if msgid_plural.nil?
        :msgctxt
      else
        :msgctxt_plural
      end
    end
  end
  private :detect_file_encoding
---- footer
